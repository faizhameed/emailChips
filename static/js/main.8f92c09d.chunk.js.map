{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","emails","emailList","error","flag","componentDidMount","str","Object","toConsumableArray","_this","emailsIn","filter","el","includes","i","length","document","getElementById","innerHTML","componentDidUpdate","handleChange","evt","setState","target","handleKeyDown","key","preventDefault","email","trim","isValid","element","classList","remove","concat","keyCode","last","console","log","handlePaste","clipboardData","getData","match","toBeAdded","isInList","handleDelete","toBeRemoved","test","this","isEmail","_this2","classes","_this$state","react_default","a","createElement","className","map","type","onClick","list","id","placeholder","onChange","onKeyDown","onPaste","React","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f92c09d.chunk.js","sourcesContent":["import React from 'react';\nimport './app.css'\n\n\nclass App extends React.Component {  \n  \nstate = {    \nvalue: '',\nemails:[],\nemailList:[\"faiz@gmail.com\",\"arun@gmail.com\",\"richard@gmail.com\",\"khalidee@yahoo.com\",\"mopetown@msn.com\"],\nerror:null,\nflag:0\n  } \n\n\ncomponentDidMount=()=>{\n  var str=''; // variable to store the options\n  var emailList = [...this.state.emailList];\n  var emailsIn = [...this.state.emails];\n  emailList = emailList.filter( ( el ) => !emailsIn.includes( el ) );\n \n  for (var i=0; i < emailList.length;++i){\n  str += '<option value=\"'+emailList[i]+'\" />'; // Storing options in variable\n  }\n  var my_list=document.getElementById(\"emailList\");\n  my_list.innerHTML = str;\n\n}\n\ncomponentDidUpdate=()=>{\n  var str=''; // variable to store the options\n  var emailList = [...this.state.emailList];\n  var emailsIn = [...this.state.emails];\n  emailList = emailList.filter( ( el ) => !emailsIn.includes( el ) );\n  \n \n  for (var i=0; i < emailList.length;++i){\n  str += '<option value=\"'+emailList[i]+'\" />'; // Storing options in variable\n  }\n  var my_list=document.getElementById(\"emailList\");\n  my_list.innerHTML = str;\n\n}\n\nhandleChange = (evt) => {  \n  this.setState(\n    {      value: evt.target.value    }\n    \n    );  \n\n};\n  \n\n//\nhandleKeyDown = (evt) => {  \n  if (['Enter', 'Tab', ','].includes(evt.key))\n   {    \n     evt.preventDefault();\n    var email = this.state.value.trim(); \n\n    if (email && this.isValid(email)) \n    {\n      var element = document.getElementById(\"error2\");\n      var element1 = document.getElementById(\"error1\")\n      element1.classList.remove(\"has-error\");\n      if(element!=null){\n\n        element.innerHTML=\"\";\n      }\n      this.setState({\n        emails: [...this.state.emails, email],\n        value: '',\n        flag:0\n      });    \n  }\n  }\n   if (evt.keyCode === 8) {\n     if (this.state.flag ===1 && this.state.value===''){\n       var last =this.state.emails[this.state.emails.length-1];\n       this.setState({\n         flag:0,\n          emails: this.state.emails.filter(el=>el!==last)\n       })\n     }\n     else if (this.state.flag===0 && this.state.value===''){\n       this.setState({\n         flag:1\n       })\n     }\n        console.log('BACKSPACE was pressed');\n\n        // Call event.preventDefault() to stop the character before the cursor\n        // from being deleted. Remove this line if you don't want to do that.\n    }\n  }\n\n\n\n  //copy and paste emails from documents\n\n  handlePaste = (evt) => {  \n    evt.preventDefault();\n    var paste = evt.clipboardData.getData('text');  \n    var emails = paste.match(/[\\w\\d\\.-]+@[\\w\\d\\.-]+\\.[\\w\\d\\.-]+/g);\n    if (emails) {\n      var toBeAdded = emails.filter(email => !this.isInList(email));\n      this.setState({\n        emails: [...this.state.emails, ...toBeAdded]\n      });  \n    \n    }};\n\n  isEmail(email) \n  {  return /[\\w\\d\\.-]+@[\\w\\d\\.-]+\\.[\\w\\d\\.-]+/.test(email);\n  }\n\n  isInList(email) {  \n    return this.state.emails.includes(email);\n  }\n\n  isValid(email) {\n    var error = null;\n    if (!this.isEmail(email))\n    {    error = `${email} is not a valid email address.`;  }\n  if (this.isInList(email)) \n  {\n    error = `${email} has already been added.`;\n  }\n  if (error) {\n    this.setState({ error });\n    return false;\n  }\n  return true;\n} \n\nhandleDelete = (toBeRemoved) => {  \n  this.setState({ \n    emails: this.state.emails.filter(email => email !== toBeRemoved) \n  });};\n  render() \n\n  {    \n    let classes= \"tag-email \";\n    classes+= (this.state.flag==1)?\"highlight\":\"no-high\";\n\n    const {error,emails}= this.state;\n    return (<main className=\"wrapper\">\n       \n    {emails.map(email => <div className={classes} key={email}>{email}\n    <button className=\"button\" type=\"button\"      \n    onClick={() =>this.handleDelete(email)}>\n      Ã—</button>\n      \n      </div>)}\n    <input list=\"emailList\" id = \"error1\"className={'input ' + (error && ' has-error')}     \n    placeholder=\"Type or paste email addresses and press `Enter`...\"      \n    value={this.state.value}      \n    onChange={this.handleChange}      \n    onKeyDown={this.handleKeyDown}\n    onPaste={this.handlePaste}\n    /><datalist id=\"emailList\">\n    </datalist>\n\n     {error && <p id =\"error2\" className=\"error\">{error}</p>} \n      </main>  \n   );  \n  \n  }\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}